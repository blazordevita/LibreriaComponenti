@using System.Reflection
@using System.ComponentModel.DataAnnotations
<table class="table">
    <thead>
        <tr>
            @foreach (var col in columns)
            {
                <th>@col</th>
            }
        </tr>
    </thead>
    <tbody>
        @for(int row = 0; row < rows.GetLength(0); row++)
        {
            <tr>
            @for(int col = 0; col < rows.GetLength(1); col++)
            {
                <td>@rows[row, col]</td>
            }
            </tr>
        }
    </tbody>
</table>

@code
{
     [Parameter] 
    public GridModel Model { get; set; }

    private string[] columns;
    private string[] displayFormat;
    private string[,] rows;


    protected override void OnParametersSet()
    {
        var properties = Model.Rows.GetType().GetElementType().GetProperties();
        loadColumns(properties);
        loadRows(properties);            
    }

    private void loadColumns(PropertyInfo[] properties)
    {
        columns = new string[properties.Length];
        displayFormat = new string[properties.Length];
        if(Model.UseAnnotations)
        {
            for (int col = 0; col < properties.Length; col++)
            {  
                var display = properties[col]
                    .GetCustomAttributes(typeof(DisplayAttribute), false)
                    .FirstOrDefault() as DisplayAttribute;

                var format = properties[col]
                    .GetCustomAttributes(typeof(DisplayFormatAttribute), false)
                    .FirstOrDefault() as DisplayFormatAttribute;

                columns[col] = display == null ? properties[col].Name : display.ShortName;
                displayFormat[col] = format != null ? format.DataFormatString  : null;
            }
        }
        else
        {
            columns = Model.Columns.Select(x => x.Caption).ToArray();
            displayFormat = Model.Columns.Select(x => x.Format).ToArray();
        }
    }

    private void loadRows(PropertyInfo[] properties)
    {
        rows = new string[Model.Rows.Length, properties.Length];

        for (int row = 0; row < Model.Rows.Length; row++)
        {
            for(int col = 0; col < properties.Length; col++)
            {
                rows[row, col] = displayFormat[col] == null 
                    ? properties[col].GetValue(Model.Rows[row]).ToString()
                    : String.Format(displayFormat[col], properties[col].GetValue(Model.Rows[row]));
            }
        }
    }
}
